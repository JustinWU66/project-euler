# This file was *autogenerated* from the file 160.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_8 = Integer(8); _sage_const_12 = Integer(12); _sage_const_10 = Integer(10)# for i in [1 .. 1000000] :
#     a = i * 5
#     x = (a + 1) * (a + 2) * (a + 3) * (a + 4) % 100000
#     if x == 24 :
#         print a, i
#         break

mod = _sage_const_10 **_sage_const_5 
R = Integers(mod)

def bonus(n) :
    ret = R(_sage_const_1 )
    w = n % _sage_const_5 
    n -= w
    for i in (ellipsis_range(_sage_const_1  ,Ellipsis, min(mod * _sage_const_2 , n))) :
        if i % _sage_const_5  == _sage_const_0  :
            continue
        t = i
        if i % _sage_const_10  in [_sage_const_4 , _sage_const_8 ] :
            t /= _sage_const_2 
        ret *= R(t)**((n - i) // (mod * _sage_const_2 ) + _sage_const_1 )
    for i in (ellipsis_range(_sage_const_1  ,Ellipsis, w)) :
        ret *= R(n + i)
    return ret

def bf(n) :
    x = factorial(n)
    while x % _sage_const_10  == _sage_const_0  :
        x /= _sage_const_10 
    return x % mod
    
def solve(n) :
    if n <= _sage_const_5  :
        return bf(n)
    return solve(n // _sage_const_5 ) * bonus(n)

print solve(_sage_const_10 **_sage_const_12 )
