# This file was *autogenerated* from the file 314.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_4 = Integer(4); _sage_const_1p0 = RealNumber('1.0'); _sage_const_20 = Integer(20); _sage_const_1en16 = RealNumber('1e-16'); _sage_const_25 = Integer(25)
def f(x, alpha) :
    r = x / sin(alpha) / sqrt(_sage_const_2 )
    return (_sage_const_1  - (x * r * cos(pi / _sage_const_4  - alpha) - r * r * alpha)) / (_sage_const_2  - _sage_const_2  * x + _sage_const_2  * alpha * r)

eps = _sage_const_1en16 

def dfs2(L, R, alpha) :
    while R - L > eps :
        lm = ((L * _sage_const_2  + R) / _sage_const_3 ).n(digits = _sage_const_25 )
        mr = ((L + R * _sage_const_2 ) / _sage_const_3 ).n(digits = _sage_const_25 )
        if f(lm, alpha) > f(mr, alpha) :
            R = mr
        else :
            L = lm
    return f((L + R) / _sage_const_2 , alpha)

def dfs1(L, R) :
    while R - L > eps :
        print L, R
        lm = ((L * _sage_const_2  + R) / _sage_const_3 ).n(digits = _sage_const_25 )
        mr = ((L + R * _sage_const_2 ) / _sage_const_3 ).n(digits = _sage_const_25 )
        if dfs2(_sage_const_0 , _sage_const_1p0 , lm) > dfs2(_sage_const_0 , _sage_const_1p0 , mr) :
            R = mr
        else :
            L = lm
    return dfs2(_sage_const_0 , _sage_const_1 , (L + R) / _sage_const_2 )

print dfs1(_sage_const_0 , pi / _sage_const_4 ).n(digits = _sage_const_20 )
# tri_search(lambda x : tri_search(lambda y : f(x, y)))
