# This file was *autogenerated* from the file 309.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_6 = Integer(6); _sage_const_10 = Integer(10)
LMT = _sage_const_10 **_sage_const_6  - _sage_const_1 
sqrt_lmt = _sage_const_10 **_sage_const_3 

G = [[] for i in (ellipsis_range(_sage_const_1  ,Ellipsis, LMT + _sage_const_1 ))]
for i in (ellipsis_range(_sage_const_1  ,Ellipsis, sqrt_lmt)) :
    print i
    for j in (ellipsis_range(_sage_const_1  ,Ellipsis, (i - _sage_const_1 ))) :
        if gcd(i, j) == _sage_const_1  :
            a = i * i - j * j
            b = _sage_const_2  * i * j
            c = i * i + j * j
            for x in (ellipsis_range(_sage_const_1  ,Ellipsis, LMT // c)) :
                G[a * x] += [(b * x, c * x)]
                G[b * x] += [(a * x, c * x)]

# m = 0
# for j, i in enumerate(G) :
#     if len(i) > m :
#         m = len(i)
#         print m, j

M = set()
ans = _sage_const_0 
for w in (ellipsis_range(_sage_const_1  ,Ellipsis, LMT)) :
    G[w].sort()
    print w, len(G[w])
    # print w
    for p, x in G[w] :
        for q, y in G[w] :
            if x <= y :
                break
            # print s, p, q
            if (p * q) / (p + q) == _sage_const_1  :
                T = (x, y, w)
                if T not in M :
                    M.add(T)
                    ans += _sage_const_1 
                    # print x, y, s.denominator(), w
print ans
