# This file was *autogenerated* from the file 352.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_100 = Integer(100); _sage_const_10000 = Integer(10000); _sage_const_10 = Integer(10)
tn = _sage_const_10000 
N = tn + _sage_const_10 
ans = _sage_const_0 
for _ in range(_sage_const_2 , _sage_const_3 ) :
    p = n(_ / _sage_const_100 , digits = _sage_const_100 )
    f = [_sage_const_0 ] * N
    g = [_sage_const_0 ] * N
    f[:_sage_const_2 ], g[:_sage_const_2 ] = [_sage_const_0 , _sage_const_1 ], [N, _sage_const_0 ]
    P = [(_sage_const_1  - p)**i for i in range(N)]
    for i in range(_sage_const_2 , N) :
        f[i] = g[i] = i
        for k in range(_sage_const_1 , i) :
            t = (P[k] - P[i]) / (_sage_const_1  - P[i])
            g[i] = min(g[i], (_sage_const_1  - t) * (f[i - k] + g[k]) + t * g[i - k] + _sage_const_1 )
        for k in range(_sage_const_1 , i + _sage_const_1 ) :
            t = P[i]
            f[i] = min(f[i], f[i - k] + (_sage_const_1  - t) * g[k] + _sage_const_1 )
        if i % _sage_const_100  == _sage_const_0  :
            print i, f[i]
