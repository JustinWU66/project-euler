# This file was *autogenerated* from the file 356.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_9 = Integer(9); _sage_const_10 = Integer(10); _sage_const_30 = Integer(30)# f = x^3 - 4 * x^2 + 2
# solns = [s[x].n(digits = 10) for s in solve(f, x, solution_dict = true)]
# for i in [0 .. 10] :
#     print sum([s^i for s in solns]), solns[2]^i

GF = Integers(_sage_const_10 **_sage_const_9 )
expo = _sage_const_10 

def find_sum(p, q) :
    init = vector([GF(_sage_const_3 ), GF(p), GF(p**_sage_const_2 )])
    mat = matrix([[GF(_sage_const_0 ), GF(_sage_const_0 ), GF(-q)], 
                  [GF(_sage_const_1 ), GF(_sage_const_0 ), GF(_sage_const_0 ) ],
                  [GF(_sage_const_0 ), GF(_sage_const_1 ), GF(p) ]])
    dest = init * mat**(expo - _sage_const_2 )
    print dest
    return dest[_sage_const_2 ]

ans = GF(_sage_const_0 )
for i in (ellipsis_range(_sage_const_1  ,Ellipsis, _sage_const_30 )) :
    ans += find_sum(_sage_const_2 **i, i) - _sage_const_1 
print ans
